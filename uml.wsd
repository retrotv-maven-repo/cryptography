@startuml 단방향암호화

interface Checksum {
    +hash(byte[] data): String
    +hash(File file): String
    +matches(byte[] data, String checksum): boolean
    +matches(File file, String checksum): boolean
    +matches(byte[] data1, byte[] data2): boolean
    +matches(File file1, File file2): boolean
}

interface PasswordEncoder {
    Spring Security Core에 포함된 인터페이스
    ==
    +encode(CharSequence rawPassword): String
    +matches(CharSequence rawPassword, String encodedPassword): boolean
    +upgradeEncoding(String encodedPassword): boolean
}

interface Password extends PasswordEncoder {
    +encode(CharSequence rawPassword): String
    +matches(CharSequence rawPassword, String encodedPassword): boolean
    +upgradeEncoding(String encodedPassword): boolean
}

interface PasswordWithSalt extends Password {
    +encode(CharSequence rawPassword): String
    +encode(CharSequence rawPassword, Charset charset): String
    +encode(CharSequence rawPassword, CharSequence salt): String
    +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
    +matches(CharSequence rawPassword, String encodedPassword): boolean
    +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
    +generateSalt(): String
    +generateSalt(int len): String
    +generateSalt(SecurityStrength securityStrength): String
    +generateSalt(SecurityStrength securityStrength, int len): String
    +upgradeEncoding(String encodedPassword): boolean
}

abstract class MessageDigestEncrypt implements Checksum, PasswordWithSalt {
    #encode(Algorithm algorithm, byte[] data): byte[]
    .. 체크섬 ..
    +encode(byte[] data): String
    +encode(File file): String
    +matches(byte[] data, String checksum): boolean
    +matches(File file, String checksum): boolean
    +matches(byte[] data1, byte[] data2): boolean
    +matches(File file1, File file2): boolean
    .. 패스워드 ..
    +encode(CharSequence rawPassword, Charset charset): String
    +encode(CharSequence rawPassword, CharSequence salt): String
    +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
    +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
    +generateSalt(): String
    +generateSalt(int len): String
    +generateSalt(SecurityStrength securityStrength): String
    +generateSalt(SecurityStrength securityStrength, int len): String

}

package SHA {
    class SHA1 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class SHA224 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class SHA256 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class SHA384 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class SHA512 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class SHA512224 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class SHA512256 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }
}

package CRC {
    class CRC32 implements Checksum, PasswordWithSalt {
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }
}

package MD {
    class MD2 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }

    class MD5 extends MessageDigestEncrypt {
        #encode(Algorithm algorithm, byte[] data): byte[]
        .. 체크섬 ..
        +encode(byte[] data): String
        +encode(File file): String
        +matches(byte[] data, String checksum): boolean
        +matches(File file, String checksum): boolean
        +matches(byte[] data1, byte[] data2): boolean
        +matches(File file1, File file2): boolean
        .. 패스워드 ..
        +encode(CharSequence rawPassword, Charset charset): String
        +encode(CharSequence rawPassword, CharSequence salt): String
        +encode(CharSequence rawPassword, CharSequence salt, Charset charset): String
        +matches(CharSequence rawPassword, CharSequence salt, String encodedPassword): boolean
        +generateSalt(): String
        +generateSalt(int len): String
        +generateSalt(SecurityStrength securityStrength): String
        +generateSalt(SecurityStrength securityStrength, int len): String
    }
}

pakage KDF {
    class Argon2 implements Password {
        -Argon2PasswordEncoder a2pe
        +Argon2()
        +Argon2(int saltLength, int hashLength, int parallelism, int memory, int iterations)
        +encode(CharSequence rawPassword): String
        +matches(CharSequence rawPassword, String encodedPassword): boolean
        +upgradeEncoding(String encodedPassword): boolean
    }

    class BCrypt implements Password {
        -BCryptPasswordEncoder bcpe
        +BCrypt()
        +BCrypt(int strength)
        +BCrypt(BCryptVersion version)
        +BCrypt(BCryptVersion version, SecureRandom random)
        +BCrypt(int strength, SecureRandom random)
        +BCrypt(BCryptVersion version, int strength)
        +BCrypt(BCryptVersion version, int strength, SecureRandom random)
        +encode(CharSequence rawPassword): String
        +matches(CharSequence rawPassword, String encodedPassword): boolean
        +upgradeEncoding(String encodedPassword): boolean
    }

    class Pbkdf2 implements Password {
        -Pbkdf2PasswordEncoder pbkdf2
        +Pbkdf2()
        +Pbkdf2(CharSequence secret, int saltLength, int iterations, Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm secretKeyFactoryAlgorithm)
        +encode(CharSequence rawPassword): String
        +matches(CharSequence rawPassword, String encodedPassword): boolean
        +upgradeEncoding(String encodedPassword): boolean
    }

    class SCrypt implements Password {
        -SCryptPasswordEncoder scrypt
        +SCrypt()
        +SCrypt(int cpuCost, int memoryCost, int parallelization, int keyLength, int saltLength)
        +encode(CharSequence rawPassword): String
        +matches(CharSequence rawPassword, String encodedPassword): boolean
        +upgradeEncoding(String encodedPassword): boolean
    }
}

@enduml